/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Ownership commitment binding data to a public key */
export interface OwnershipCommitment {
  /** Prover's public key (32 bytes) */
  publicKey: Buffer
  /** SHA256 hash of the data (32 bytes)   */
  dataHash: Buffer
  /** SHA256(data_hash || public_key) (32 bytes) */
  commitmentHash: Buffer
}
/** Block commitment from blockchain */
export interface BlockCommitment {
  /** Block height from Chia blockchain */
  blockHeight: number
  /** Block hash from Chia blockchain (32 bytes) */
  blockHash: Buffer
}
/** Anchored ownership commitment combining ownership and blockchain state */
export interface AnchoredOwnershipCommitment {
  /** The ownership commitment */
  ownershipCommitment: OwnershipCommitment
  /** The blockchain commitment */
  blockCommitment: BlockCommitment
  /** SHA256(ownership_commitment || block_hash) (32 bytes) */
  anchoredHash: Buffer
}
/** Physical access commitment proving data access at specific block */
export interface PhysicalAccessCommitment {
  /** Blockchain block height */
  blockHeight: number
  /** Previous commitment in chain (32 bytes) */
  previousCommitment: Buffer
  /** Current block hash (32 bytes) */
  blockHash: Buffer
  /** Indices of selected chunks */
  selectedChunks: Array<number>
  /** SHA256 hashes of selected chunks */
  chunkHashes: Array<Buffer>
  /** SHA256 of all above fields (32 bytes) */
  commitmentHash: Buffer
}
/** HashChain file header with metadata */
export interface HashChainHeader {
  /** File format identifier b'HCHN' */
  magic: Buffer
  /** Format version (must match HASHCHAIN_FORMAT_VERSION) */
  formatVersion: number
  /** SHA256 of original data file (32 bytes) */
  dataFileHash: Buffer
  /** Merkle root of chunks (32 bytes) */
  merkleRoot: Buffer
  /** Number of chunks (use f64 for large numbers in JS) */
  totalChunks: number
  /** Size of each chunk in bytes (4 bytes) */
  chunkSize: number
  /** SHA256 of data file path for binding (32 bytes) */
  dataFilePathHash: Buffer
  /** Initial anchored commitment (32 bytes) */
  anchoredCommitment: Buffer
  /** Number of chain links (4 bytes) */
  chainLength: number
  /** SHA256 of header fields 0-151 (32 bytes) */
  headerChecksum: Buffer
}
/** Proof window containing last 8 commitments for verification */
export interface ProofWindow {
  /** Last 8 commitments */
  commitments: Array<PhysicalAccessCommitment>
  /** Merkle proofs for selected chunks */
  merkleProofs: Array<Buffer>
  /** Commitment from 8 blocks ago */
  startCommitment: Buffer
  /** Latest commitment */
  endCommitment: Buffer
}
/** Result of chunk selection with verification data */
export interface ChunkSelectionResult {
  /** Selected chunk indices */
  selectedIndices: Array<number>
  /** Algorithm version used */
  algorithmVersion: number
  /** Total chunks in file */
  totalChunks: number
  /** Block hash used for selection */
  blockHash: Buffer
  /** Hash of selection parameters for verification */
  verificationHash: Buffer
}
/** CONSENSUS CRITICAL: Standardized chunk selection algorithm V1 */
export declare function selectChunksV1(blockHash: Buffer, totalChunks: number): ChunkSelectionResult
/** Verify chunk selection matches network consensus algorithm */
export declare function verifyChunkSelection(blockHash: Buffer, totalChunks: number, claimedIndices: Array<number>, expectedAlgorithmVersion?: number | undefined | null): boolean
/** Create ownership commitment */
export declare function createOwnershipCommitment(publicKey: Buffer, dataHash: Buffer): OwnershipCommitment
/** Create anchored ownership commitment */
export declare function createAnchoredOwnershipCommitment(ownershipCommitment: OwnershipCommitment, blockCommitment: BlockCommitment): AnchoredOwnershipCommitment
/** Verify proof window */
export declare function verifyProof(proofWindow: ProofWindow, anchoredCommitment: Buffer, merkleRoot: Buffer, totalChunks: number): boolean
/** Main HashChain implementation for Proof of Storage Continuity */
export declare class HashChain {
  /** Create new HashChain instance */
  constructor(publicKey: Buffer, blockHeight: number, blockHash: Buffer)
  /** Load existing HashChain from .hashchain file */
  static loadFromFile(hashchainFilePath: string): HashChain
  /** Stream data to files with SHA256-based naming */
  streamData(data: Buffer, outputDir: string): void
  /** Add new block to the hash chain */
  addBlock(blockHash: Buffer): PhysicalAccessCommitment
  /** Verify entire hash chain */
  verifyChain(): boolean
  /** Read chunk from data file */
  readChunk(chunkIdx: number): Buffer
  /** Get current chain length */
  getChainLength(): number
  /** Get total chunks */
  getTotalChunks(): number
  /** Get current commitment hash */
  getCurrentCommitment(): Buffer | null
  /** Get anchored commitment hash */
  getAnchoredCommitment(): Buffer | null
  /** Get file paths */
  getFilePaths(): Array<string> | null
  /** Get proof window for last 8 blocks (CONSENSUS CRITICAL) */
  getProofWindow(): ProofWindow
}
